windows下安装Git:
官网下载安装程序，用默认的设置安装就可以。安装完成后，需要做最后一步设置：
	git config --global user.name "Yourname"
	git config --global user.email "wangwenchao_sdu@163.com"
//自报家门，说明本机器身份。

创建版本库。首先，选择一个合适的地方创建空目录
	mkdir learngit
	cd learngit
	pwd	//显示当前目录
	git init //通过此命令把当前目录变为Git的仓库
使用windows要特别注意，不能使用windows自带的记事本。

例如我们写了一个readme.txt文件，要把它加到我们创建的Git仓库中。
	git add readme.txt	//将readme.txt添加到仓库中
	git commit -m "wrote a readme file" //commit命令将文件提交到仓库, -m后的是对该文件的注释说明
需要注意的是：git可以一次性添加多个文件，而commit会将上面添加的文件一并提交。例如：
	git add file1.txt file2.txt
	git add file3.txt
	git commit -m "add 3 files."

查看仓库目前的运行状态：
	git status
可以查看当前的文件哪些是被修改了的，仓库里哪些文件当前是没有被Git监控的。如果想查看某个文件的修改记录，可以使用：
	git diff readme.txt
知道了readme.txt文件做了哪些修改，再将其上传到Git仓库中就放心多了。

查看Git仓库中的历史记录：
	git log
可以在后面添加 --pretty=oneline命令让显示的结果更美观。git log命令下按q则退出当前状态。

版本回退：
在显示的结果中，标有HEAD的是当前版本，HEAD^表示上一个版本，HEAD^^表示的是上上一个版本。如果想要表示往上的N个版本，N非常大，可以这样写：HEAD~N
如果把现在的版本回退到上一个版本，可以：
	git reset --hard HEAD^
退回上个版本之后，就已经看不到当前版本了。如果git窗口没有关，还想回到当前版本的话，就要找到当前版本的commit号，例如：
	git reset --hard 68522f0e5c2f29dacb719fe7953e13b572f36d3f
	
Git有工作区和暂存区的概念，git add命令只是把一个个文件添加到暂存区，而commit命令一次把暂存区的文件提交到工作区了。
修改，第一次添加 ->  第二次修改 -> commit -> 此时提交的文件只是暂存区中第一次修改的文件，而第二次修改的文件因为没有添加到暂存区，所以没有被提交。
	cat readme.txt (cat + 文件名) 可以查询到文件中具体的内容
	git diff HEAD -- readme.txt 可以查询工作区和版本库中最新版本的区别

git checkout -- readme.txt。
命令readme.txt文件在工作区的修改全部撤销，这里有两种情况：
一种是readme.txt自修改后没有被放在(add)暂存区，此时撤销就恢复到版本库的状态；一种是readme.txt添加到暂存区后又做了修改，此时撤销就恢复到添加到暂存区后的状态。
也就是，让该文件回到最近一次被git add或git commit的状态。
注意：撤销一定要在checkout后面加 -- ，否则，就成为切换分支的命令了。

如果文件修改后已经提交到了暂存区，可以使用：
	git reset HEAD readme.txt
命令将暂存区的修改撤销掉，重新放到工作区。即使已经提交文件，只要没有把他推送到远程，就还有机会撤回，使用版本回退的功能可以。

删除文件：
	git rm readme.txt
remove后，如果确认删除，也要commit一下。如果删错了，可以用git checkout -- readme.txt 恢复。

搭建连接远程仓库：
1.创建SSH Key。看用户主目录中有没有.ssh目录，有的话再看这个目录下有没有id_rsa和id_rsa.pub这两个文件，没有的话：
	ssh-keygen -t rsa "wangwenchao_sdu@163.com"
如此生成id_rsa和id_rsa.pub两个文件。这两个文件是SSH Key秘钥对，id_rsa是私钥（不能泄露），id_rsa.pub是公钥。
2.登录Github->个人头像->settings->Add SSH key->填上title,粘贴上add key后点击确定即可搭建远程仓库。
3.在github上点击create repo(repository)，填上name（例如本次填的是learngit）即可创建。
4.在本地和github上各自搭建了仓库之后，下面要做的就是把两个仓库连接起来。
	git remote add origin git@github.com:WinchouWang/learngit.git
git@后面的是在github上创建的仓库的地址。添加后，远程库的名字就是origin.这一步完成之后，即可把本地库与远程库连接起来。
5.连接完成，即可以将本地仓库中的文件直接传入到github仓库中去了。
	git push -u origin master
这条命令就是把本地的master分支内容推送到origin中。因为第一次推送时，远程的master库是空的，所以 -u 参数即将本地的master分支与远程仓库的master分支关联起来。方便以后的上传。
在之后的操作中，本地提交之后，就可以使用git push命令将本地文件推送至github中了。

将github中的库克隆至本地库。
假设自己的库的名字是gitskills.那么：
	git clone git@github.com:WinchouWang/gitskills  (git@github.com:WinchouWang/gitskills是github上库的地址)
克隆后，本地cd gitskills,ls（显示一下当前文件夹文件），即可看到克隆的库中的文件。

Git默认提交是在主线master分支上提交的。而HEAD指向的是master，master是指向提交的，所以HEAD指向的是当前分支。
每次提交（commit），master分支都会向前一步，随着不断提交，master分支也会越来越长。所以，master也相当于一个指针。

当我们创建新的分支，例如dev，Git新建了一个指针dev，指向master相同的提交（commit），再把HEAD指向dev，就表示当前分支在dev上。
	创建新分支：git checkout -b dev （加上 -b 后，就表示创建并切换，相当于
		git branch dev //创建dev分支
 		git checkout dev	//切换到dev分支
	两条命令）
	创建后，可以用：git branch 查看当前分支。
这时再次进行提交的操作，dev就向前移动一步，而master指针是不变的。我们在dev上的工作完成后，就可以把dev和master两个分支合并起来，
合并的方法就是让master指针直接指向dev的当前提交，但是注意，在合并之前要切换到要合并的分支上，例如，我们要把dev合并到master上：
	git checkout master
	git merge dev //把dev合并到master分支上，这样，刚才在dev上提交的内容就在master分支上出现了
合并之后，就可以删除dev分支了：
	git branch -d dev
删除之后，查看当前分支，应该就只有master分支了。

解决合并时的冲突：
	当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。解决冲突就是把Git合并失败的文件手动编辑为我们希望的内容，再提交。
	用git log --graph命令可以看到分支合并图。

分支管理策略：
	合并时注意fast forward模式。如果用了fast forward模式，就不能看出合并历史信息。
	如果不用的话，可以用上述命令看到合并分支图：
	git merge --no-ff -m "....."
	git log --graph --pretty=oneline --abbrev-commit
	在实际开发中，master分支应当是非常稳定的，所以并不在master分支上工作。干活都在dev分支上，大家都在dev上干活，每个人都有自己的分支，到了版本发布的时候，再把dev合并到master分支上。

出现bug分支的解决方案：
	创建一个临时分支修复bug，修复后合并分支，再将临时分支删除。
	先把当前分支（dev）的工作现场保存起来：
		git stash
	再确定要在哪个分支上修复bug，假定要在master分支上创建名为issue-101的临时分支修复：
		git checkout master
		git checkout -b issue-101
	修复完成后然后提交，切换回master分支，完成合并，最后删除issue-101分支。
	bug修改完毕，就可以接着切换回dev分支，用
		（1）git stash apply恢复，恢复后用git stash pop删除。
		（2）git stash pop恢复并删除。
		
	删除后，可以用git stash list查看是否成功删除。
可以多次stash，恢复的时候，先用git stash list查看，然后恢复指定的stash，用命令：
	git stash apply stash@{0}
	
添加一个新功能时，你肯定不希望因为一些实验性质的代码，把主分支搞乱了，所以，每添加一个新功能，最好新建一个feature分支，在上面开发，完成后，合并，最后，删除该
feature分支。
假设，开发名为vulcan的新功能：
	git checkout -b feature-vulcan
	git add vulcan.java
	git commit -m "add vulcan.java"
	git checkout dev
如果合并前此时接到任务放弃这个开发任务，要马上取消：
	git branch -d feature-vulcan
此时，会提示feature-vulcan分支还没有被合并，如果删除，就丢失掉修改，需要强行删除：
	git branch -D feature-vulcan

查看远程库的信息：
	git remote (-v)
加-v参数的话会显示更详细的信息。显示的会有可以抓取和推送的远程库地址，如果没有推送权限，则不显示push地址。

推送分支：就是把本地分支推送到远程库上，推送时，要指定本地分支。
	git push origin master //推送本地的master分支到远程的origin仓库中
	git push origin dev //推送本地的dev分支到远程的origin仓库中
master分支是主分支，所以要时刻与远程同步；dev分支是开发分支，团队所有成员都在上面工作，所以也必须推送到远程。

将远程origin的dev分支拷贝到本地，用下列命令创建本地dev分支：
	git checkout -b dev origin/dev
拷贝到本地之后，就可以在dev上继续修改，时不时将dev推送到远程。

创建标签：
切换到需要打标签的分支上
	git tag <name> 即可为该分支打上一个名为name的标签
	git tag 查看标签
	
默认标签是打在最新提交的commit上，如果想在历史的某个提交上打一个标签：
	（1）找到历史提交的commit id（git log --pretty=oneline --abbrev-commit）
	（2）git tag <name> <commit id> （为commit id的文件打上名为name的标签）
	git show <tagname> 可以通过tagname看到该commit的详细信息
删除标签：
	git tag -d v0.1
推送某个标签到远程：
	git push origin <tagname>	推送名为tagname的标签
一次性推送本地全部尚未推送的标签：
	git push origin -tags
如果标签已经推送到远程，此时想要删除：
	（1）先从本地删除：git tag -d <tagname>
	（2）从远程删除： git push origin:refs/tags/<tagname>

忽略特殊文件：
	使用git过程中，有些文件必须要放到git目录中但又无法提交。此时git会显示untracked files...
	所以要在git工作区创建gitignore文件把要忽略的文件名都填进去。gitignore文件不需要从头写，只需要在下面链接中找到自己需要的部分即可
		https://github.com/github/gitignore
如果有时候想添加文件，但这个文件被gitignore忽略了，此时可以尝试强行添加：
	git add -f <file.name>

配置别名：
	git config --global alias st status  //告诉Git，以后st就代表status。global参数代表全局参数，在该电脑所有git仓库中都可以使用。
一般可以用co代表checkout，ci表示commit，br表示branch。
	